<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>模板</title>
    <link href="/2023/06/15/%E6%A8%A1%E6%9D%BF/"/>
    <url>/2023/06/15/%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h1>数据结构</h1><h2 id="线段树1">线段树1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a[maxn];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> tree[<span class="hljs-number">4</span>*maxn];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> tag[<span class="hljs-number">4</span>*maxn];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>        tree[p]=a[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p*<span class="hljs-number">2</span>,l,mid);<br>    <span class="hljs-built_in">build</span>(p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    tree[p]=tree[p*<span class="hljs-number">2</span>]+tree[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">spread</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(tag[p])&#123;<br>        <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> lson=p*<span class="hljs-number">2</span>,rson=lson+<span class="hljs-number">1</span>;<br>        tag[lson]+=tag[p];<br>        tree[lson]+=tag[p]*(mid-l+<span class="hljs-number">1</span>);<br>        tag[rson]+=tag[p];<br>        tree[rson]+=tag[p]*(r-mid);<br>        tag[p]=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//注意这里的cl,cr为查询的区间，l和r为节点的区间</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> cl,<span class="hljs-type">int</span> cr,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-comment">// cout&lt;&lt;&quot;dbg:&quot;&lt;&lt;cl&lt;&lt;&quot; &quot;&lt;&lt;cr&lt;&lt;&quot; &quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;tree[p]&lt;&lt;endl;</span><br>    <span class="hljs-keyword">if</span>(cl&lt;=l&amp;&amp;cr&gt;=r)<br>        <span class="hljs-keyword">return</span> tree[p];<br>    <span class="hljs-built_in">spread</span>(p,l,r);<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(cl&lt;=mid) res+=<span class="hljs-built_in">ask</span>(p*<span class="hljs-number">2</span>,cl,cr,l,mid);<br>    <span class="hljs-keyword">if</span>(cr&gt;mid) res+=<span class="hljs-built_in">ask</span>(p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,cl,cr,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> d,<span class="hljs-type">int</span> cl,<span class="hljs-type">int</span> cr,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(cl&lt;=l&amp;&amp;cr&gt;=r)&#123;<br>        tag[p]+=d;<br>        tree[p]+=d*(r-l+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">spread</span>(p,l,r);<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> lson=p*<span class="hljs-number">2</span>,rson=lson+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(cl&lt;=mid) <span class="hljs-built_in">change</span>(lson,d,cl,cr,l,mid);<br>    <span class="hljs-keyword">if</span>(cr&gt;mid) <span class="hljs-built_in">change</span>(rson,d,cl,cr,mid+<span class="hljs-number">1</span>,r);<br>    tree[p]=tree[lson]+tree[rson];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> opt,x,y,z;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a[i]);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;opt);<br>        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;z);<br>            <span class="hljs-built_in">change</span>(<span class="hljs-number">1</span>,z,x,y,<span class="hljs-number">1</span>,n);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;x,&amp;y);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">ask</span>(<span class="hljs-number">1</span>,x,y,<span class="hljs-number">1</span>,n));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 1 7 6 2 3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/07/%E5%8D%B7%E7%A7%AF/"/>
    <url>/2023/06/07/%E5%8D%B7%E7%A7%AF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构2 PTA的一点点知识点（少）</title>
    <link href="/2023/05/30/dataStructure2PTA/"/>
    <url>/2023/05/30/dataStructure2PTA/</url>
    
    <content type="html"><![CDATA[<h1>2</h1><ul><li><p>2-13 G1是G的生成树，则G1不是G的连通分量，G1是G的极小连通子图</p></li><li><p>2-14 一个有向图有n个顶点，则每个顶点的度可能的最大值是 $ 2(n-1) $，此处不考虑重边和自环。</p></li></ul><h1>4</h1><ul><li><p>1-6 若一个有向图的邻接矩阵对角线以下元素均为零，则该图的拓扑有序序列必定存在。</p><p>这是对的，因为上三角矩阵意味着只有编号小的点指向编号大的点，则一定不存在回路。</p><p>任何一个无环的有向图一定有拓扑序列，有环的有向图则没有拓扑序列。</p></li></ul><h1>5</h1><p>2-2 选c，因为弧（P210）的定义为：箭头的起始端为弧尾，结束端为弧头。</p><h1>6</h1><ul><li>1-8 当向二叉搜索树中插入一个结点，则该结点一定成为叶子结点。</li></ul><p>这是 对  的。注意是二叉搜索树，只插入到相匹配的叶子上。</p><ul><li>1-10 对大小均为n的有序表和无序表分别进行顺序查找，在等概率查找的情况下，对于查找成功，它们的平均查找长度是相同的，而对于查找失败，它们的平均查找长度是不同的。</li></ul><p>这是 对 的。查找失败指的是表中没有这个元素，而有序表因为有序，对p，当有a&lt;p&lt;b时即可停止。无序表就要查完整个表才行。</p><ul><li><p>2-6 对22个记录的有序表作折半查找，当查找失败时，至少需要比较（ ）次关键字。</p><p>填4 。至少4次，至多5次。不是满二叉树。</p></li><li><p>2-17 在长度为32的有序表中进行二分查找时，所需进行的关键字比较次数最多为( )</p></li></ul><p>答案是6. 注意二叉树的节点数，31的高度为5，32就是6了。</p><p>$2^k-1=n$ ,k为高度。</p><h1>chapter7 图</h1><ul><li><p>1-8 <strong>十字链表</strong>是<strong>有向图</strong>的一种存储结构</p><p>​       <strong>邻接多重表</strong>是<strong>无向图</strong>的一种存储结构</p></li><li><p>1-33 <strong>连通分量</strong>是<strong>无向图</strong>中的极大连通子图。</p><p>​        <strong>强连通分量</strong>是<strong>有向图</strong>中的极大连通子图。</p><p>​         <strong>连通图</strong>和<strong>连通分量</strong>都是<strong>无向图</strong>的概念。</p><p>​          <strong>强连通图</strong>和<strong>强连通分量</strong>都是<strong>有向图</strong>的概念</p></li><li><blockquote><p>2-6例题：G是一个非连通无向图，共有28条边，则该图至少有（）个顶点。</p></blockquote><p>考虑到<strong>非连通图</strong>，应该最终答案加1，故答案为9</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据机构, 复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>first page</title>
    <link href="/2023/05/29/firstPage/"/>
    <url>/2023/05/29/firstPage/</url>
    
    <content type="html"><![CDATA[<h3 id="行内公式测试：-E-mc-2">行内公式测试： $E=mc^2$</h3><h3 id="行间公式测试">行间公式测试:</h3><p>$$\sum_\limits{i=1}^{n}i=\frac{n(n+1)}{2} $$</p><h3 id="代码测试：">代码测试：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iosteam&gt;</span></span><br>usign <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="表格测试：">表格测试：</h3><table><thead><tr><th>序号</th><th>日期</th><th>文章标题</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="分割线测试：">分割线测试：</h3><hr><h3 id="颜色测试：-font-color-red-绿色-font">颜色测试：<font color=red>绿色</font></h3><h3 id="emoji测试-😂">emoji测试 😂</h3><h3 id="链接测试：如何在markdown使用emoji">链接测试：<a href="https://gist.github.com/rxaviers/7360908" title="emoji">如何在markdown使用emoji</a></h3><p><a href="https://github-emoji-picker.rickstaa.dev/" title="点击就复制到剪切板">emoji工具</a> 😀</p><h3 id="图片测试：">图片测试：</h3><img src="/2023/05/29/firstPage/yourName.jpg" class="" title="yourName"><p>测试B站视频（当前为评论区第三版）：</p><p>教程参考：<a href="https://luhuadong.com/hexo/hexo-video.html">HEXO插入B站视频教程</a> -----（感觉这篇教程里的主题很好看）</p><iframe src="//player.bilibili.com/player.html?aid=655571722&bvid=BV1Ea4y157HT&cid=1127209236&page=1&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>你好啊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开始的开始</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/29/hello-world/"/>
    <url>/2023/05/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
